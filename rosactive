#!/usr/bin/env python3
"""
This code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

It is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this codebase.  If not, see <https://www.gnu.org/licenses/>.

Copyright cst (chris thierauf, <chris@cthierauf.com>) 2020-2021, all rights
reserved.
"""

import os
import subprocess
activate_script = os.path.join(os.path.expanduser('~'), '.rosactive', 'venv', 'bin', 'activate')
subprocess.call('source '+activate_script, shell=True)
import argparse
import yaml
import os
from tabulate import tabulate


class Workspace:
    """ object to handle json representation of workspaces """
    def __init__(self, abs_path, name, current, state):
        self.abs_path = abs_path
        self.name = name
        self.current = current
        self.state = state


def main():
    """ main """
    parser = argparse.ArgumentParser(description="Utility to manage systems with "
                                     "multiple ROS workspaces that may or may "
                                     "not be related to each other, by setting "
                                     "them to be automatically enabled/"
                                     "disabled as necessary. "
                                     "If a workspace is 'on', it is being "
                                     "automatically sourced by your shell. "
                                     "If it's 'off', it has not been edited and "
                                     "is still a valid workspace, it's just not "
                                     "being sourced on shell startup.")
    parser.add_argument('selection', choices=[
        'clear',
        'current',
        'list',
        'off',
        'on',
        'index',
        'unindex',
        'refresh',
        'project-enter',
        'project-exit',
        'project-delete',
        'project-make',
    ],
                        #required=True, # redundant for positional arg
                        help="[clear] the currently activated workspaces, set a [current] "
                        "workspace, [list] all available workspaces, turn a workspace "
                        "[off] or [on], make rosactive aware of a ros workspace "
                        "by [index]ing (or unaware by [unindex]ing) it or [refresh] "
                        "rosactive if workspaces have been modified outside of rosactive. "
                        "You can also use 'projects' to bulk enable/disable workspaces: "
                        "[project-enter] or [project-exit] to enter or leave an existing "
                        "project (activating all of its associated settings), or make/delete "
                        "projects using [project-make] or [project-delete].")

    parser.add_argument('workspace', nargs='*')
    parser.add_argument('--name', type=str, help="When indexing a workspace, manually set "
                        "the abbreviated name (overriding the default naming strategy)")
    parsed = parser.parse_args()

    if parsed.selection == 'clear':
        selection_clear()
    if parsed.selection == 'current':
        selection_current(parsed.workspace)
    if parsed.selection == 'list':
        selection_list(parsed.workspace)
    if parsed.selection == 'off':
        selection_off(parsed.workspace)
    if parsed.selection == 'on':
        selection_on(parsed.workspace)
    if parsed.selection == 'index':
        selection_index(parsed.workspace, parsed.name)
    if parsed.selection == 'unindex':
        selection_unindex(parsed.workspace)
    if parsed.selection == 'refresh':
        selection_refresh()
    if parsed.selection == 'project-make':
        selection_project_make(parsed.name)
    if parsed.selection == 'project-delete':
        selection_project_delete(parsed.name)
    if parsed.selection == 'project-enter':
        selection_project_enter(parsed.name)
    if parsed.selection == 'project-exit':
        selection_project_exit(parsed.name)


def parse_workspace_db():
    ''' function to read the yaml db. '''
    with open('~/.rosactive/workspace_db.yaml') as dbfile:
        loaded = yaml.safe_load(dbfile.read())
        if loaded is None or len(loaded) == 0:
            return list()
        return loaded


def refresh_shell():
    '''
    after going to the trouble of rosactive on/off-ing,
    we refresh the shell so it takes place now.
    '''
    pipe = subprocess.Popen(". %s; env" % '~/.rosactive/workspace_db.yaml', stdout=subprocess.PIPE, shell=True)
    data = pipe.communicate()[0]

    env = dict((line.split("=", 1) for line in data.splitlines()))
    os.environ.update(env)

def write_workspace_db(db):
    ''' function to write the yaml db. '''
    with open('~/.rosactive/workspace_db.yaml', 'w') as dbfile:
        dbfile.write(yaml.safe_dump(db))


def parse_project_db():
    with open('~/.rosactive/project_db.yaml') as dbfile:
        loaded = yaml.safe_load(dbfile.read())
        if loaded is None or len(loaded) == 0:
            return list()
        return loaded


def write_project_db(db):
    with open('~/.rosactive/project_db.yaml', 'w') as dbfile:
        dbfile.write(yaml.safe_dump(db))


def write_source(db, source_command, comment, file_extension, prepend=None, append=None):
    '''
    write the `bass source`, etc strings used to make the
    on/off/active stuff take effect
    '''
    final_string = prepend if prepend is not None else ''
    for item in db:
        this_path = item['abs_path'] + '/devel/setup.'+file_extension+"\n"
        if not item['state']:
            this_path = comment + this_path
        final_string = final_string + source_command + ' ' + this_path

    final_string = final_string + append if append is not None else ''
    with open('~/.rosactive/sourceable.fish') as sourcefile:
        sourcefile.write(final_string)

    refresh_shell()


def write_source_fish(db):
    write_source(db, 'bass source', '#', 'bash')

def selection_clear():
    ''' function to handle the clear cli option'''
    db = parse_workspace_db()
    for item in db:
        item['state'] = False
        item['current'] = False

    write_workspace_db(db)


def selection_current(workspaces: list):
    ''' function to handle the current cli option'''
    if len(workspaces) != 1:
        print("your current workspace is the one `roscd` will take you to, "
              "among other things. So there can only be 1! Did you mean to use `on`? Closing.")
        return

    db = parse_workspace_db()
    for item in db:
        item['current'] = False
        if item['name'] == workspaces[0]:
            item['current'] = True

    write_workspace_db(db)


def selection_list(workspaces: list):
    ''' function to handle the list cli option'''
    loaded_db = parse_workspace_db()
    project_db = parse_project_db()
    display_list = []
    for item in loaded_db:
        display_list.append([
            item['name'],
            ("Yes" if item['state'] else "No"),
            ("Yes" if item['current'] else ""),
            item['abs_path'],
        ])

    print(tabulate(display_list, headers=["Name", "Active", "Current", "Full Path"]))


def selection_off(workspaces: list):
    ''' function to handle the off cli option'''
    yaml_db = parse_workspace_db()
    for item in yaml_db:
        for space in workspaces:
            if item['name'] == space:
                item['state'] = False

    write_workspace_db(yaml_db)
    write_source_fish(yaml_db)


def selection_on(workspaces: list):
    ''' function to handle the on cli option'''
    yaml_db = parse_workspace_db()
    for item in yaml_db:
        for space in workspaces:
            if item['name'] == space:
                item['state'] = True

    write_workspace_db(yaml_db)
    write_source_fish(yaml_db)


def selection_index(path, name=None):
    ''' function to handle the index cli option'''
    if len(path) != 1:
        print('indexing must be one-at-a-time')
        return

    path = path[0]
    db = parse_workspace_db()
    if not os.path.isdir(path):
        print('not a directory')
        return

    path = os.path.abspath(path)
    dellist = []
    for ws in db:
        if ws['abs_path'] == path:
            dellist.append(ws)

    for item in dellist:
        db.remove(item)

    if name is None:
        # make sure we aren't starting/ending with 'ws_' or '-workspace' etc
        name = os.path.basename(path)
        if name.startswith('ws-') or name.startswith('ws_'):
            name = name[len('ws_'):]
        if name.startswith('workspace-') or name.startswith('workspace_'):
            name = name[len('workspace_'):]

        if name.startswith('-ws') or name.startswith('_ws'):
            name = name[len('_ws'):]
        if name.startswith('-workspace') or name.startswith('_workspace'):
            name = name[len('_workspace'):]

    ws = Workspace(path, name, False, False)
    db.append(ws.__dict__)
    write_workspace_db(db)


def selection_unindex(workspaces: list):
    ''' function to handle the unindex cli option'''
    yaml_db = parse_workspace_db()
    removeme = []
    for item in yaml_db:
        for space in workspaces:
            if item['name'] == space:
                removeme.append(item)

    if len(removeme) != len(workspaces):
        # didn't find some matches. figure out how to handle that.
        removeme_names = [i['name'] for i in removeme]
        print("wasn't sure what to do with "+str(list(set(workspaces) - set(removeme_names))))

    for item in removeme:
        yaml_db.remove(item)

    write_workspace_db(yaml_db)


def selection_refresh():
    ''' function to handle the refresh cli option '''
    selection_clear()
    write_source_fish(parse_workspace_db())


def selection_project_make(project_name: str):
    pass


def selection_project_delete(project_name: str):
    pass


def selection_project_enter(project_name: str):
    pass


def selection_project_exit(project_name: str):
    pass


if __name__ == '__main__':
    main()
